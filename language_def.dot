digraph language_def{
  rankdir=LR;
  language_def_1[label="language_def"];
  cmpTest_1[label="cmpTest() -> vac"];
  language_def_1 -> cmpTest_1;
  missing_1[label="missing compiler.ast.stmt.TypedVarList"];
  cmpTest_1 -> missing_1;
  missing_2[label="missing compiler.ast.stmt.AssignmentExpr"];
  missing_1 -> missing_2;
  expr_stmt_1[label="call prt(\"res: \") -> vac"];
  missing_2 -> expr_stmt_1;
  expr_stmt_2[label="call pln(var[res#0]) -> vac"];
  expr_stmt_1 -> expr_stmt_2;
  missing_3[label="missing compiler.ast.stmt.InitializedVarList"];
  expr_stmt_2 -> missing_3;
  missing_4[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_3 -> missing_4;
  missing_5[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_4 -> missing_5;
  missing_6[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_5 -> missing_6;
  missing_7[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_6 -> missing_7;
  missing_8[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_7 -> missing_8;
  missing_9[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_8 -> missing_9;
  missing_10[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_9 -> missing_10;
  expr_stmt_3[label="call pln(var[c#3]) -> vac"];
  missing_10 -> expr_stmt_3;
  expr_stmt_4[label="call pln(var[d#4]) -> vac"];
  expr_stmt_3 -> expr_stmt_4;
  expr_stmt_5[label="call pln(var[e#5]) -> vac"];
  expr_stmt_4 -> expr_stmt_5;
  expr_stmt_6[label="call pln(var[f#6]) -> vac"];
  expr_stmt_5 -> expr_stmt_6;
  expr_stmt_7[label="call pln(var[g#7]) -> vac"];
  expr_stmt_6 -> expr_stmt_7;
  bla_1[label="bla() -> str"];
  language_def_1 -> bla_1;
  missing_11[label="missing compiler.ast.stmt.ReturnStatement"];
  bla_1 -> missing_11;
  ifTest_1[label="ifTest() -> vac"];
  language_def_1 -> ifTest_1;
  missing_12[label="missing compiler.ast.stmt.IfStatement"];
  ifTest_1 -> missing_12;
  cmplxOpTest_1[label="cmplxOpTest() -> vac"];
  language_def_1 -> cmplxOpTest_1;
  missing_13[label="missing compiler.ast.stmt.TypedVarList"];
  cmplxOpTest_1 -> missing_13;
  missing_14[label="missing compiler.ast.stmt.AssignmentExpr"];
  missing_13 -> missing_14;
  expr_stmt_8[label="call prt(\"2 ^ 10 = \") -> vac"];
  missing_14 -> expr_stmt_8;
  expr_stmt_9[label="call pln(var[res#0]) -> vac"];
  expr_stmt_8 -> expr_stmt_9;
  missing_15[label="missing compiler.ast.stmt.InitializedVarList"];
  expr_stmt_9 -> missing_15;
  missing_16[label="missing compiler.ast.stmt.AssignmentExpr"];
  missing_15 -> missing_16;
  expr_stmt_10[label="call pln(var[c#4]) -> vac"];
  missing_16 -> expr_stmt_10;
  whlTest_1[label="whlTest() -> vac"];
  language_def_1 -> whlTest_1;
  missing_17[label="missing compiler.ast.stmt.InitializedVarList"];
  whlTest_1 -> missing_17;
  missing_18[label="missing compiler.ast.stmt.WhileStatement"];
  missing_17 -> missing_18;
  missing_19[label="missing compiler.ast.stmt.AssignmentExpr"];
  missing_18 -> missing_19;
  missing_20[label="missing compiler.ast.stmt.WhileStatement"];
  missing_19 -> missing_20;
  main_1[label="main() -> vac"];
  language_def_1 -> main_1;
  missing_21[label="missing compiler.ast.stmt.InitializedVarList"];
  main_1 -> missing_21;
  expr_stmt_11[label="call pln(var[t#0]) -> vac"];
  missing_21 -> expr_stmt_11;
  expr_stmt_12[label="call pln(\"hi\") -> vac"];
  expr_stmt_11 -> expr_stmt_12;
  expr_stmt_13[label="call pln(42#int) -> vac"];
  expr_stmt_12 -> expr_stmt_13;
  expr_stmt_14[label="call cmpTest() -> vac"];
  expr_stmt_13 -> expr_stmt_14;
  expr_stmt_15[label="call cmplxOpTest() -> vac"];
  expr_stmt_14 -> expr_stmt_15;
  expr_stmt_16[label="call ifTest() -> vac"];
  expr_stmt_15 -> expr_stmt_16;
  expr_stmt_17[label="call whlTest() -> vac"];
  expr_stmt_16 -> expr_stmt_17;
  expr_stmt_18[label="call someOtherFn() -> vac"];
  expr_stmt_17 -> expr_stmt_18;
  expr_stmt_19[label="call bla() -> str"];
  expr_stmt_18 -> expr_stmt_19;
  callSomeOtherFn_1[label="callSomeOtherFn() -> vac"];
  language_def_1 -> callSomeOtherFn_1;
  someFn_1[label="someFn(flt p4, flt p3, int p2, int p1) -> vac"];
  language_def_1 -> someFn_1;
  expr_stmt_20[label="call callSomeOtherFn() -> vac"];
  someFn_1 -> expr_stmt_20;
  otherFn_1[label="otherFn(int x) -> int"];
  language_def_1 -> otherFn_1;
  missing_22[label="missing compiler.ast.stmt.TypedVarList"];
  otherFn_1 -> missing_22;
  missing_23[label="missing compiler.ast.stmt.ReturnStatement"];
  missing_22 -> missing_23;
  a_1[label="a() -> int"];
  language_def_1 -> a_1;
  missing_24[label="missing compiler.ast.stmt.ReturnStatement"];
  a_1 -> missing_24;
  logTest_1[label="logTest() -> vac"];
  language_def_1 -> logTest_1;
  missing_25[label="missing compiler.ast.stmt.TypedVarList"];
  logTest_1 -> missing_25;
  missing_26[label="missing compiler.ast.stmt.AssignmentExpr"];
  missing_25 -> missing_26;
  yay_1[label="yay() -> boo"];
  language_def_1 -> yay_1;
  missing_27[label="missing compiler.ast.stmt.ReturnStatement"];
  yay_1 -> missing_27;
  then_1[label="then() -> vac"];
  language_def_1 -> then_1;
  nay_1[label="nay() -> vac"];
  language_def_1 -> nay_1;
  afterIf_1[label="afterIf() -> vac"];
  language_def_1 -> afterIf_1;
  doSth_1[label="doSth() -> vac"];
  language_def_1 -> doSth_1;
  doSthDifferent_1[label="doSthDifferent() -> vac"];
  language_def_1 -> doSthDifferent_1;
  whatEverIDontCare_1[label="whatEverIDontCare() -> vac"];
  language_def_1 -> whatEverIDontCare_1;
  conditions_1[label="conditions() -> vac"];
  language_def_1 -> conditions_1;
  missing_28[label="missing compiler.ast.stmt.IfStatement"];
  conditions_1 -> missing_28;
  expr_stmt_21[label="call afterIf() -> vac"];
  missing_28 -> expr_stmt_21;
  missing_29[label="missing compiler.ast.stmt.IfStatement"];
  expr_stmt_21 -> missing_29;
  missing_30[label="missing compiler.ast.stmt.InitializedVarList"];
  missing_29 -> missing_30;
  missing_31[label="missing compiler.ast.stmt.WhileStatement"];
  missing_30 -> missing_31;
  someFn_2[label="someFn() -> vac"];
  language_def_1 -> someFn_2;
  expr_stmt_22[label="call prt(\"I sound my barbaric YAWP over the roofs of the world.\") -> vac"];
  someFn_2 -> expr_stmt_22;
  bla_2[label="bla() -> vac"];
  language_def_1 -> bla_2;
  expr_stmt_23[label="call pln(\"bla\") -> vac"];
  bla_2 -> expr_stmt_23;
  someOtherFn_1[label="someOtherFn() -> vac"];
  language_def_1 -> someOtherFn_1;
  missing_32[label="missing compiler.ast.stmt.TypedVarList"];
  someOtherFn_1 -> missing_32;
  missing_33[label="missing compiler.ast.stmt.WhileStatement"];
  missing_32 -> missing_33;
  missing_34[label="missing compiler.ast.stmt.ScopeStatement"];
  missing_33 -> missing_34;
}
